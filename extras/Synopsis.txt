project is a text-based RPG game where users can register, log in, and engage in hunting adventures to earn coins and experience points (XP) while managing their health.

Key Features:
	•	User Registration & Login: Players can create an account and log in, with their progress stored in a JSON file.
	•	Hunting System: Players encounter different creatures based on their level and earn rewards (coins & XP) while losing health.
	•	Level Progression: The player’s level is determined by their XP, with a maximum level of 10.
	•	Health Management: Players lose health when hunting; if health reaches zero, they lose all XP.
	•	User Deletion: Users can delete their account.
	•	Persistent Data Storage: Player data is saved in a JSON file to maintain progress across sessions.

Game Flow:
	1.	User selects Register or Login.
	2.	After logging in, they can:
	•	Hunt: Encounter creatures, earn rewards, and risk health loss.
	•	Delete their account.
	•	Exit the game (saving progress).
	3.	If the player’s health reaches zero, they lose all XP and must start over.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

Project Description: Text-Based RPG Game

Overview

This is a text-based RPG adventure game where players can register, log in, and embark on hunts to earn rewards while battling various creatures. The game features persistent player data storage, level-based progression, and resource management mechanics such as health, XP, and coins.

Features

✅ User Registration & Login – Players create accounts and log in, with progress saved in a JSON file.
✅ Hunting System – Players fight creatures, earning XP and coins while losing health.
✅ Level System – XP determines a player’s level (max level 10). Higher levels offer greater rewards but tougher challenges.
✅ Health Management – Players must monitor health; if it drops to zero, they lose all XP.
✅ Persistent Data Storage – Game progress is stored using JSON, allowing players to continue where they left off.
✅ Account Deletion – Users can delete their account if they wish to restart.
✅ Simple Menu System – Players navigate through choices like hunting, deleting accounts, or exiting.

Gameplay Flow
	1.	Players register or log in.
	2.	They choose an action:
	•	Hunt 🏹 – Encounter creatures, earn coins/XP, and risk health loss.
	•	Delete Account ❌ – Remove their profile permanently.
	•	Exit Game 🔚 – Save progress and quit.
	3.	If health drops to zero, the player loses all XP and must recover.

Technologies Used

📝 Python – Core programming language.
📂 JSON – Used for storing and retrieving player data.
🎲 Random Module – Handles randomness in creature encounters and rewards.
📡 OS Module – Manages file operations for persistent storage.

This project provides a basic but engaging RPG experience with simple mechanics, making it easy to expand with new features like weapons, shops, or multiplayer elements.




---------------------------------------------------------------------------------------------------------------------------------------------------------------------------



Detailed Description of Each Module in the Text-Based RPG Game

Your project consists of different functional modules that handle user management, game mechanics, and data storage. Below is a detailed breakdown of each module and its responsibilities.

1. User Data Management Module

📂 Files Used: user_data.json
🔹 Purpose: Handles saving, loading, and deleting user data.

Functions:

🔹 load_user_data()
	•	Purpose: Loads the saved user data from user_data.json.
	•	How It Works:
	•	Checks if user_data.json exists.
	•	If yes, reads and returns the JSON data as a dictionary.
	•	If no, returns an empty dictionary.
	•	Key Operations:
	•	Uses the os.path.exists() function to check if the file exists.
	•	Uses json.load() to read data from the file.
	•	Example Output:

{
  "player1": {
    "password": "abc123",
    "coin": 50,
    "xp": 100,
    "health": 80,
    "total_health": 100,
    "attack": 10,
    "defense": 5
  }
}



🔹 save_user_data(data)
	•	Purpose: Saves the current game state into user_data.json.
	•	How It Works:
	•	Opens user_data.json in write mode.
	•	Uses json.dump() to write the updated user data.
	•	Key Operations:
	•	Uses indent=4 for better readability.
	•	Overwrites the entire file with the new data.

2. User Authentication Module

🔹 Purpose: Handles user registration, login, and account deletion.

Functions:

🔹 register()
	•	Purpose: Creates a new user profile and saves it.
	•	How It Works:
	•	Prompts the user for a username and password.
	•	Checks if the username already exists in user_data.json.
	•	If available, creates a new entry with:
	•	Initial coins, XP, health, attack, and defense stats.
	•	Saves the data using save_user_data().
	•	Example Output:

Enter a new username: hero123
Enter a new password: ******
Registration successful!



🔹 login()
	•	Purpose: Allows existing users to log in.
	•	How It Works:
	•	Prompts the user for username and password.
	•	Checks if the username exists in user_data.json.
	•	If the password matches, logs in the user.
	•	If incorrect, denies access.
	•	Example Output:

Enter your username: hero123
Enter your password: ******
Login successful! Welcome, hero123!



🔹 delete_user(username)
	•	Purpose: Deletes a user account permanently.
	•	How It Works:
	•	Loads the user data from user_data.json.
	•	If the username exists, deletes it from the dictionary.
	•	Saves the updated data back to the file.
	•	Example Output:

User hero123 has been deleted.

3. Game Mechanics Module

🔹 Purpose: Controls XP-based leveling and the hunting system.

Functions:

🔹 get_level(xp)
	•	Purpose: Determines the player’s level based on XP.
	•	How It Works:
	•	Uses xp // 200 + 1 formula to determine the level.
	•	Limits the level to maximum 10.
	•	Example Calculation:
	•	XP = 450 → Level = (450 // 200) + 1 = 3
	•	XP = 2200 → Level = 10 (Max Level)

🔹 rpghunt(level, user)
	•	Purpose: Simulates a hunting encounter where the player fights a random creature and earns coins, XP, and loses health.
	•	How It Works:
	•	Defines a list of 10 creatures with different XP, coin rewards, and HP loss.
	•	Selects an enemy based on the player’s level.
	•	Generates random values for coins earned, XP gained, and health lost using random.randint().
	•	Updates the user’s stats accordingly.
	•	If health drops to 0, all XP is lost.
	•	Displays battle results.
	•	Example Output:

------------------------------------------------
                    Level 3:
------------------------------------------------
⚔️ Encountered a Bear!
💔 Lost 3 health points.
⭐ Gained 18 experience points.
💰 Collected 7 coins.
------------------------------------------------
❤️ Health: 77/100
------------------------------------------------
💵 Total coins: 23, ⭐ Total experience points: 118


	•	If health reaches 0:

💀 You have been defeated and lost all your experience points.

4. Main Game Loop Module

🔹 Purpose: Handles the game flow and menu system.

Functions:

🔹 main()
	•	Purpose: Runs the game loop where users register, log in, and play.
	•	How It Works:
	1.	User Authentication:
	•	If not logged in, prompts user to Register or Log In.
	2.	Game Menu:
	•	Players choose an action:
	•	Hunt 🏹
	•	Delete Account ❌
	•	Exit 🔚
	3.	Game Progression:
	•	Updates user data after each hunt.
	•	Saves progress before exiting.
	4.	End Conditions:
	•	If health reaches 0, the player loses all XP.
	•	If the user chooses to delete their account, the session ends.
	•	Example Menu:

Menu:
1. Register
2. Login
Enter your choice: 2

Menu:
1. Hunt
2. Delete User
3. Exit
Enter your choice: 1

Summary of Modules & Responsibilities

Module	Functions	Description
User Data Management	load_user_data(), save_user_data()	Handles saving/loading player data.
User Authentication	register(), login(), delete_user()	Manages user registration, login, and deletion.
Game Mechanics	get_level(xp), rpghunt(level, user)	Manages XP, levels, and hunting encounters.
Main Game Loop	main()	Controls the game’s flow and user interactions.

Possible Enhancements 🚀
	•	Shop System: Players can buy health potions or weapons.
	•	Inventory System: Store collected items.
	•	Combat Choices: Players can choose to attack, defend, or flee.
	•	Multiplayer Mode: Compete against other players.